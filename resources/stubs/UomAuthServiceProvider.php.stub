<?php

namespace App\Providers;

use Illuminate\Contracts\Foundation\Application;
use Illuminate\Support\ServiceProvider;
use Ory\Kratos\Client\Api\FrontendApi;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Route;

class UomAuthServiceProvider extends ServiceProvider
{

    /**
     * Register services.
     */
    public function register(): void
    {
        $this->app->singleton(FrontendApi::class, function (Application $app) {
            $config = new \Ory\Kratos\Client\Configuration;
            $config->setHost(config('uom-id.auth.uom.routes.host'));

            $frontendApi = new FrontendApi(null, $config);

            return $frontendApi;
        });
    }

    /**
     * Bootstrap services.
     */
    public function boot(): void
    {
        // Define custom guard for Ory Kratos instance (https://laravel.com/docs/10.x/authentication#adding-custom-guards, https://laravel.com/docs/10.x/authentication#closure-request-guards)
        Auth::viaRequest('uom', function (Request $request) {
            // TODO: Deduplicate this with the singleton in register method
            $config = new \Ory\Kratos\Client\Configuration;
            $config->setHost(config('uom-id.auth.uom.routes.host'));

            $frontendApi = new FrontendApi(null, $config);

            try {
                // Get current user session
                $session = $frontendApi->toSession(null, $request->header('Cookie'));
                $identity = $session->getIdentity()->getTraits();

                $user = ['id' => $session->getIdentity()->getId(), 'name' => $identity->name, 'email' => $identity->email];

                return (object) $user;
            } catch (\Ory\Kratos\Client\ApiException $err) {
                // Not authenticated
                if ($err->getCode() !== 401) {
                    throw $err;
                }

                return null;
            }
        });

        // Register routes
        $this->defineRoutes();
    }


    /**
     * Define the Sanctum routes.
     *
     * @return void
     */
    protected function defineRoutes()
    {
        if (app()->routesAreCached()) {
            return;
        }

        Route::group(['prefix' => 'auth'], function () {
            // ALL ROUTES UNDER THE GROUP ARE PREFIXED WITH "/auth"

            Route::get('@me', function (Request $request) {
                return $request->user() ?? (object) [];
            });


            Route::get('login', function (Request $request, FrontendApi $frontendApi) {
                try {
                    $frontendApi->createBrowserLoginFlow(null, null, route(config('uom-id.auth.uom.redirects.login')), $request->header('Cookie'));

                    $loginUrl = $request::create(config('uom-id.auth.uom.routes.login'))->fullUrlWithQuery([
                        'return_to' => route(config('uom-id.auth.uom.redirects.login')),
                    ]);

                    return redirect($loginUrl);
                } catch (\Ory\Kratos\Client\ApiException $err) {
                    $errorBody = json_decode($err->getResponseBody());

                    // Handle null error body
                    if (is_null($errorBody)) {
                        if (App::hasDebugModeEnabled()) {
                            return response()->json(['message' => $err->getMessage()]);
                        } else {
                            return $this->genericJsonErrorResponse();
                        }
                    }

                    $errorId = $errorBody->error->id;

                    // TODO: Complete handling all errorId cases
                    switch ($errorId) {
                        case 'session_already_available':
                            return redirect(route(config('uom-id.auth.uom.redirects.login')));
                        default:
                            return $this->genericJsonErrorResponse();
                    }
                }
            })->name('login');


            Route::get('logout', function (Request $request, FrontendApi $frontendApi) {
                try {
                    $response = $frontendApi->createBrowserLogoutFlow($request->header('Cookie'));
                    $logoutUrl = $request::create($response['logoutUrl'])->fullUrlWithQuery([
                        'return_to' => route(config('uom-id.auth.uom.redirects.logout')),
                    ]);

                    return redirect($logoutUrl);
                } catch (\Ory\Kratos\Client\ApiException $err) {
                    $errorBody = json_decode($err->getResponseBody());

                    // Handle null error body
                    if (is_null($errorBody)) {
                        if (App::hasDebugModeEnabled()) {
                            return response()->json(['message' => $err->getMessage()]);
                        } else {
                            return $this->genericJsonErrorResponse();
                        }
                    }

                    // TODO: Use errorId as you wish
                    $errorId = $errorBody->error->id;

                    return redirect(route(config('uom-id.auth.uom.redirects.logout')));
                }
            })->name('logout');
        });
    }

    private function genericJsonErrorResponse()
    {
        return response()->json(['message' => 'An unknown error has occurred, please contact the server administrator.']);
    }
}
